<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayerIdle_Normal</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objCombatEntity</parentName>
  <maskName>sprPlayerMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

enum EnemyType
{
    NORMAL,
    PHANTOM,
    GUNNER,
    GOLEM,
    BRAIN
}

enum AbilityType
{
    NOTHING,
    PLAYER_SLICE,
    PHANTOM_STAB,
    PHANTOM_DASH,
    GUNNER_GUNSHOT,
    GOLEM_PUNCH,
    BRAIN_SHOT,
    BRAIN_FOCUS
}


// CONSTANTS //

MAX_SPEED = 5;
ACCEL = 0.8;
FRIC = 0.6;

DEATH_WAIT = 60;
CHANGE_SPEED = 12;
NUM_CHANGE_PARTICLES = 4;
NUM_DASH_PARTICLES = 15;

PRIMARY_COOLDOWN = 0;
SECONDARY_COOLDOWN = 0;

DASH_TIMER = 9;
DASH_SPEED = 14;

GOLEM_WAIT = 30;

BRAIN_PARASITE_SPEED = 0.1;
BRAIN_PARASITE_FRAMES = sprite_get_number(sprBrainParasite);

NUM_BLOOD_SPLATTERS = 2;

// VARIABLES //

// Sprites
idleSprite = -1;
moveSprite = -1;
primarySprite = -1;
secondarySprite = -1;

idleAnim = 0;
moveAnim = 0;
primaryAnim = 0;
secondaryAnim = 0;

footstep = false;
deathWait = DEATH_WAIT;

brainParasiteFrame = 0;

aimAngle = 0;

dashing = false;
golemWait = false;
dashTimer = DASH_TIMER;

type = EnemyType.NORMAL;
changing = false;
changeTarget = noone;

primaryAbility = AbilityType.NOTHING;
primaryCooldown = 0;

secondaryAbility = AbilityType.NOTHING;
secondaryCooldown = 0;

event_user(15);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (!instance_exists(objScreenTransition))
{
    if (isPressed(global.RESTART, global.RESTART_GP))
    {
        var trans = instance_create(x, y, objScreenTransition);
        trans.rm = room;
    }
}

if (!changing &amp;&amp; !dead)
{
    if (golemWait &gt; 0)
        golemWait--;

    if (!dashing)
    {
        // MOVEMENT //
        
        var horComp = 0, vertComp = 0;
        
        if (golemWait == 0)
        {
            // Calculate movement angle
            if (isDownMove(global.MOVE_LEFT))
                horComp = -1;
            else if (isDownMove(global.MOVE_RIGHT))
                horComp = 1;
                
            if (isDownMove(global.MOVE_UP))
                vertComp = -1;
            else if (isDownMove(global.MOVE_DOWN))
                vertComp = 1;
        }
        
        var angle = point_direction(0, 0, horComp, vertComp);
        
        // Apply movement acceleration and friction
        if (horComp != 0)
            hspd = approach(hspd, MAX_SPEED * lengthdir_x(1, angle), ACCEL);
        else
            hspd = approach(hspd, 0, FRIC);
            
        if (vertComp != 0)
            vspd = approach(vspd, MAX_SPEED * lengthdir_y(1, angle), ACCEL);
        else
            vspd = approach(vspd, 0, FRIC);
    }
    else
    {
        // generate dash particles
        for (var i = 0; i &lt; NUM_DASH_PARTICLES; i++)
        {
            var dashPart = instance_create(x, y, objPhantomDashParticle);
            dashPart.angle = aimAngle - 180;
        }
        
        // DASH TIMEOUT //
        if (dashTimer &gt; 0)
            dashTimer--;
        else
        {
            dashing = false;
            canBeHit = true;
            dashTimer = DASH_TIMER;
            hspd /= 4;
            vspd /= 4;
        }
    }
       
        
    // AIMING //
    
    if (window_mouse_get_x() != global.MOUSE_XPREV || window_mouse_get_y() != global.MOUSE_YPREV)
    {
        aimAngle = point_direction(x, y, mouse_x, mouse_y);
    }
    else if (gamepad_is_connected(0) &amp;&amp; gamepad_axis_value(0, gp_axisrh) &lt; -0.3 || gamepad_axis_value(0, gp_axisrh) &gt; 0.3 ||
        gamepad_axis_value(0, gp_axisrv) &lt; -0.3 || gamepad_axis_value(0, gp_axisrv) &gt; 0.3)
    {
        var axisH = gamepad_axis_value(0, gp_axisrh);
        var axisV = gamepad_axis_value(0, gp_axisrv);
        
        aimAngle = point_direction(0, 0, axisH, axisV);
    }

    // ABILITIES //
    
    if (primaryCooldown &gt; 0)
        primaryCooldown--;
    
    if (secondaryCooldown &gt; 0)
        secondaryCooldown--;
       
    if (!dashing)
    { 
        if (mouse_check_button_pressed(global.PRIMARY_ABILITY) || gamepad_button_check_pressed(0, global.PRIMARY_ABILITY_GP))
        {
            if (primaryCooldown == 0)
            {
                useAbility(primaryAbility);
                image_index = 0;
                primaryCooldown = PRIMARY_COOLDOWN;
            }
        }
        
        if (mouse_check_button_pressed(global.SECONDARY_ABILITY) || gamepad_button_check_pressed(0, global.SECONDARY_ABILITY_GP))
        {
            if (secondaryCooldown == 0)
            {
                useAbility(secondaryAbility);
                image_index = 0;
                secondaryCooldown = SECONDARY_COOLDOWN;
            }
        }
    }
}
// CHANGING //
else if (!dead)
{
    canBeHit = false;
    
    // Moving towards the new body
    if (point_distance(x, y, changeTarget.x, changeTarget.y) &gt; 10)
    {
        var angle = point_direction(x, y, changeTarget.x, changeTarget.y);
        
        x = approach(x, changeTarget.x, abs(lengthdir_x(CHANGE_SPEED, angle)));
        y = approach(y, changeTarget.y, abs(lengthdir_y(CHANGE_SPEED, angle)));
        
        // generate change particles
        for (var i = 0; i &lt; NUM_CHANGE_PARTICLES; i++)
        {
            instance_create(x, y, objChangeParticle);
        }
    }
    
    // Have gotten to the new body
    else
    {
        x = changeTarget.x;
        y = changeTarget.y;
    
        while (place_meeting(x, y, objCollide))
        {
            var obj = instance_place(x, y, objCollide);
            var objAngle = point_direction(obj.x, obj.y, x, y);
            
            while (place_meeting(x, y, obj))
            {
                x += lengthdir_x(1, objAngle);
                y += lengthdir_y(1, objAngle);
            }
        }
        
        changing = false;
        canBeHit = true;
        type = changeTarget.type;
        event_user(15);
        
        // Destroy the enemy
        with (changeTarget) instance_destroy();
    }
}

// DEATH //
if (dead)
{
    hspd = approach(hspd, 0, FRIC);
    vspd = approach(vspd, 0, FRIC);
    
    if (deathWait &gt; 0)
        deathWait--;
    else if (deathWait == 0)
    {
        deathWait--;
       
        var trans = instance_create(x, y, objScreenTransition);
        trans.rm = room;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CHANGE ABILITIES event

primaryAbility = getPrimaryAbility(type);
secondaryAbility = getSecondaryAbility(type);

PRIMARY_COOLDOWN = getAbilityCooldown(primaryAbility);
primaryCooldown = 0;

SECONDARY_COOLDOWN = getAbilityCooldown(secondaryAbility);
secondaryCooldown = 0;

setTypeAttributes(type);

audio_play_sound(choose(sndBeat1, sndBeat2), 7, false);
audio_play_sound(choose(sndGross1, sndGross2, sndGross3), 7, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// FOOTSTEP event

if (type == EnemyType.GOLEM)
{
    var audio = instance_create(x, y, objAudioSource);
    audio.life = true;
    audio.SCALE = 5;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// HURT event

instance_create(0, 0, objHurtOverlay);
shakeScreen(3, 0.15);
with (objHUD) event_user(0);

// generate blood splatters
for (var i = 0; i &lt; NUM_BLOOD_SPLATTERS; i++)
{
    var dashPart = instance_create(x, y, objBloodSplatter);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// DEATH event

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Set the sprite index

if (primaryCooldown != PRIMARY_COOLDOWN &amp;&amp; primaryCooldown != 0)
{
    sprite_index = primarySprite;
    image_speed = primarySpeed;
}
else if (secondaryCooldown != SECONDARY_COOLDOWN &amp;&amp; secondaryCooldown != 0)
{
    sprite_index = secondarySprite;
    image_speed = secondarySpeed;
}
else
{
    if (hspd == 0 &amp;&amp; vspd == 0)
    {
        sprite_index = idleSprite;
        image_speed = idleSpeed;
    }
    else
    {
        sprite_index = moveSprite;
        image_speed = moveSpeed;
    }
}

if (sprite_index = moveSprite)
{
    if (image_index &gt;= 1 &amp;&amp; image_index &lt; 1.3 ||
        image_index &gt;= 3 &amp;&amp; image_index &lt; 3.3)
    {
        if (!footstep)
        {
            footstep = true;
            event_user(14);
        }
    }
    else
    {
        footstep = false;
    }
}


if (changing)
    image_alpha = 0.5;
else
    image_alpha = 1;

draw_sprite_ext(sprite_index, image_index, x + 3, y + 3, image_xscale, image_yscale, aimAngle, c_black, 0.3);
draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, aimAngle, c_white, image_alpha);
draw_sprite_ext(sprBrainParasite, floor(brainParasiteFrame), x, y, 1, 1, aimAngle, c_white, image_alpha);
brainParasiteFrame = (brainParasiteFrame + BRAIN_PARASITE_SPEED) % (BRAIN_PARASITE_FRAMES - 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
