<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayerIdle_Normal</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objCombatEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

enum PlayerState
{
    NORMAL
}


// CONSTANTS //

MAX_SPEED = 5;
ACCEL = 0.8;
FRIC = 0.6;


// VARIABLES //

state = PlayerState.NORMAL;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// MOVEMENT //

var horComp = 0, vertComp = 0;

// Calculate movement angle
if (isDownMove(global.MOVE_LEFT))
    horComp = -1;
else if (isDownMove(global.MOVE_RIGHT))
    horComp = 1;
    
if (isDownMove(global.MOVE_UP))
    vertComp = -1;
else if (isDownMove(global.MOVE_DOWN))
    vertComp = 1;
    
var angle = point_direction(0, 0, horComp, vertComp);

// Apply movement acceleration and friction
if (horComp != 0)
    hspd = approach(hspd, MAX_SPEED * lengthdir_x(1, angle), ACCEL);
else
    hspd = approach(hspd, 0, FRIC);
    
if (vertComp != 0)
    vspd = approach(vspd, MAX_SPEED * lengthdir_y(1, angle), ACCEL);
else
    vspd = approach(vspd, 0, FRIC);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
