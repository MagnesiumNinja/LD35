<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayerIdle_Normal</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objCombatEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

enum EnemyType
{
    NORMAL,
    PHANTOM,
    GUNNER
}

enum AbilityType
{
    NOTHING,
    PHANTOM_STAB,
    PHANTOM_DASH,
    GUNNER_GUNSHOT
}


// CONSTANTS //

MAX_SPEED = 5;
ACCEL = 0.8;
FRIC = 0.6;

CHANGE_SPEED = 20;
NUM_CHANGE_PARTICLES = 4;

PRIMARY_COOLDOWN = 0;
SECONDARY_COOLDOWN = 0;

DASH_TIMER = 9;
DASH_SPEED = 14;


// VARIABLES //

aimAngle = 0;

dashing = false;
dashTimer = DASH_TIMER;

type = EnemyType.GUNNER;
changing = false;
changeTarget = noone;

primaryAbility = AbilityType.NOTHING;
primaryCooldown = 0;

secondaryAbility = AbilityType.NOTHING;
secondaryCooldown = 0;

event_user(15);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!changing)
{
    if (!dashing)
    {
        // MOVEMENT //
        
        var horComp = 0, vertComp = 0;
        
        // Calculate movement angle
        if (isDownMove(global.MOVE_LEFT))
            horComp = -1;
        else if (isDownMove(global.MOVE_RIGHT))
            horComp = 1;
            
        if (isDownMove(global.MOVE_UP))
            vertComp = -1;
        else if (isDownMove(global.MOVE_DOWN))
            vertComp = 1;
            
        var angle = point_direction(0, 0, horComp, vertComp);
        
        // Apply movement acceleration and friction
        if (horComp != 0)
            hspd = approach(hspd, MAX_SPEED * lengthdir_x(1, angle), ACCEL);
        else
            hspd = approach(hspd, 0, FRIC);
            
        if (vertComp != 0)
            vspd = approach(vspd, MAX_SPEED * lengthdir_y(1, angle), ACCEL);
        else
            vspd = approach(vspd, 0, FRIC);
    }
    else
    {
        // DASH TIMEOUT //
        if (dashTimer &gt; 0)
            dashTimer--;
        else
        {
            dashing = false;
            dashTimer = DASH_TIMER;
            hspd /= 4;
            vspd /= 4;
        }
    }
       
        
    // AIMING //
    
    aimAngle = point_direction(x, y, mouse_x, mouse_y);
             
        
    if (!dashing)
    {
        // ABILITIES //
        
        if (primaryCooldown &gt; 0)
            primaryCooldown--;
        
        if (secondaryCooldown &gt; 0)
            secondaryCooldown--;
        
        if (mouse_check_button_pressed(global.PRIMARY_ABILITY) || gamepad_button_check_pressed(0, global.PRIMARY_ABILITY_GP))
        {
            if (primaryCooldown == 0)
            {
                useAbility(primaryAbility);
                primaryCooldown = PRIMARY_COOLDOWN;
            }
        }
        
        if (mouse_check_button_pressed(global.SECONDARY_ABILITY) || gamepad_button_check_pressed(0, global.SECONDARY_ABILITY_GP))
        {
            if (secondaryCooldown == 0)
            {
                useAbility(secondaryAbility);
                secondaryCooldown = SECONDARY_COOLDOWN;
            }
        }
    }
}

// CHANGING //
else
{
    // Moving towards the new body
    if (point_distance(x, y, changeTarget.x, changeTarget.y) &gt; 5)
    {
        var angle = point_direction(x, y, changeTarget.x, changeTarget.y);
        
        x = approach(x, changeTarget.x, abs(lengthdir_x(CHANGE_SPEED, angle)));
        y = approach(y, changeTarget.y, abs(lengthdir_y(CHANGE_SPEED, angle)));
        
        // generate particles
        for (var i = 0; i &lt; NUM_CHANGE_PARTICLES; i++)
        {
            instance_create(x, y, objChangeParticle);
        }
    }
    
    // Have gotten to the new body
    else
    {
        x = changeTarget.x;
        y = changeTarget.y;
    
        changing = false;
        type = changeTarget.type;
        event_user(15);
        
        // Destroy the enemy
        with (changeTarget) instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CHANGE ABILITIES event

primaryAbility = getPrimaryAbility(type);
secondaryAbility = getSecondaryAbility(type);

PRIMARY_COOLDOWN = getAbilityCooldown(primaryAbility);
primaryCooldown = PRIMARY_COOLDOWN;

SECONDARY_COOLDOWN = getAbilityCooldown(secondaryAbility);
secondaryCooldown = SECONDARY_COOLDOWN;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
