<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayerIdle_Normal</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>50</depth>
  <persistent>0</persistent>
  <parentName>objEnemyEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

enum PhantomAIState
{
    IDLE,
    MOVE,
    DODGE,
    ATTACK
}


// CONSTANTS //

RECALCULATE_TIME = 10;
MAX_HP = 1;
MOVE_SPEED = 4;
ROTATE_SPEED = 0.25;

FRIC = 0.6;
KNOCKBACK_SPEED = 3;

AGGRO_DIS = 650;
VIEW_ANGLE = 25;
ATTACK_DIS = 16;
DODGE_DIS = 64;
DODGE_SPEED = 15;
COOLDOWN_TIME = 80;
CHARGE_TIME = 50;
ATTACK_TIME = 40;

NUM_DASH_PARTICLES = 15;
NUM_BLOOD_SPLATTERS = 3;

// VARIABLES //

hp = MAX_HP;
recalcTime = RECALCULATE_TIME;
type = EnemyType.PHANTOM;
target = objPlayer;

dodgeAngle = 0;
state = PhantomAIState.IDLE;
cooldownTime = COOLDOWN_TIME;
chargeTime = CHARGE_TIME;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (!dead)
{
    switch(state)
    {
        case PhantomAIState.IDLE:
        {
            var tarAngle = point_direction(x, y, target.x, target.y);
            
            if (distance_to_object(target) &lt; AGGRO_DIS &amp;&amp; isAngleBetween(tarAngle, image_angle - VIEW_ANGLE, image_angle + VIEW_ANGLE) &amp;&amp; !collision_line(x, y, target.x, target.y, objCollide, false, true))
            {
                // Line of sight
                state = PhantomAIState.MOVE;
            }
        
            break;    
        }
    
    
        case PhantomAIState.MOVE:
        {
            if (!collision_line(x, y, target.x, target.y, objCollide, false, true))
            {
                image_angle = smoothRotate(point_direction(x, y, target.x, target.y), ROTATE_SPEED, image_angle);
            }
        
            // Checking attack
            if (point_distance(x, y, target.x, target.y) &lt; ATTACK_DIS)
            {
                state = PhantomAIState.ATTACK;
            }
            else if (distance_to_object(objGunnerGunshot) &lt; DODGE_DIS)
            {
                state = PhantomAIState.DODGE;
            }
        
            if (recalcTime &gt; 0)
                recalcTime--;
            else
            {
                // Recalculate the path to the player
                destX = target.x;
                destY = target.y;
                findPath = true;
                recalcTime = RECALCULATE_TIME;
            }
            
            if (followingPath)
            {            
                if (path_index = -1)
                {
                    followingPath = false;
                    hasPath = false;
                }
            }
            else
            {            
                if (hasPath)
                {
                    path_start(path, MOVE_SPEED, path_action_stop, true);
                    followingPath = true;
                }
            }
            
            break;
        }
        
        case PhantomAIState.ATTACK:
        {
            path_end();
            followingPath = false;
            hasPath = false;
        
            if (chargeTime &gt; 0)
                chargeTime--;
            
            if (chargeTime == ATTACK_TIME)
            {
                // Attack
                var attack = instance_create(x, y, objPhantomStab);
                attack.image_angle = point_direction(x, y, target.x, target.y);
                attack.target = target;
                attack.par = id;
            }
            else if (chargeTime == 0)
            {
                chargeTime = CHARGE_TIME;
                state = PhantomAIState.IDLE;
            }
        
            break;
        }
        
        
        case PhantomAIState.DODGE:
        {
            path_end();
            
            if (cooldownTime = COOLDOWN_TIME)
            {
                dodgeAngle = point_direction(x, y, target.x, target.y) + choose(-1, 1) * 45;
                
                hspd = lengthdir_x(DODGE_SPEED, dodgeAngle);
                vspd = lengthdir_y(DODGE_SPEED, dodgeAngle);
                
                cooldownTime--;
            }
            else if (cooldownTime &gt; 0)
            {
                cooldownTime--;
                
                // Slow down
                hspd = approach(hspd, 0, FRIC);
                vspd = approach(vspd, 0, FRIC);
                
                if (sqrt(sqr(hspd) + sqr(vspd)) &gt; 0)
                {
                    // generate dash particles
                    for (var i = 0; i &lt; NUM_DASH_PARTICLES; i++)
                    {
                        var dashPart = instance_create(x, y, objPhantomDashParticle);
                        dashPart.angle = dodgeAngle - 180;
                    }
                }
            }
            else
            {
                state = PhantomAIState.IDLE;
                cooldownTime = COOLDOWN_TIME;
            }
            
            break;
        }
    }
}
else
{
    path_end();
       
    // Slow down
    hspd = approach(hspd, 0, FRIC);
    vspd = approach(vspd, 0, FRIC);

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DEAD event

path_end();

objPlayer.changing = true;
objPlayer.changeTarget = id;

if (!(hitX == 0 &amp;&amp; hitY == 0))
{
    var kbAngle = point_direction(hitX, hitY, x, y);
    hspd = lengthdir_x(KNOCKBACK_SPEED, kbAngle);
    vspd = lengthdir_y(KNOCKBACK_SPEED, kbAngle);
}

// generate blood splatters
for (var i = 0; i &lt; NUM_BLOOD_SPLATTERS; i++)
{
    var dashPart = instance_create(x, y, objBloodSplatter);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, c_white, fowAlpha);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
