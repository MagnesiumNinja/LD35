<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprIdle_Gunner</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>50</depth>
  <persistent>0</persistent>
  <parentName>objEnemyEntity</parentName>
  <maskName>sprGunnerMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

enum GunnerAIState
{
    IDLE,
    MOVE,
    ALERT,
    ATTACK
}


// CONSTANTS //

RECALCULATE_TIME = 10;
MAX_HP = 3;
MOVE_SPEED = 2.3;

AGGRO_DIS = 750;
NOTICE_DIS = 32;
VIEW_ANGLE = 30;
CHARGE_TIME = 60;
ATTACK_TIME = 45;
ALERT_TIME = 30;

NUM_BLOOD_SPLATTERS = 4;

MIN_MOVE_RANGE = -128;
MAX_MOVE_RANGE = 128;

FRIC = 0.4;
KNOCKBACK_SPEED = 0;
ALERT_FADE_SPEED = 0.05;


// VARIABLES //

hp = MAX_HP;
recalcTime = RECALCULATE_TIME;
type = EnemyType.GUNNER;
target = objPlayer;

state = GunnerAIState.IDLE;
chargeTime = CHARGE_TIME;
alertTime = ALERT_TIME
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (pullFrozenTime == 0 &amp;&amp; !frozen &amp;&amp; !dead)
{
    switch(state)
    {
        case GunnerAIState.IDLE:
        {
            var tarAngle = point_direction(x, y, target.x, target.y);
            
            if (place_meeting(x, y, objAudioSource) ||
                point_distance(x, y, target.x, target.y) &lt;= NOTICE_DIS || 
                distance_to_object(target) &lt; AGGRO_DIS &amp;&amp; isAngleBetween(tarAngle, image_angle - VIEW_ANGLE, image_angle + VIEW_ANGLE) &amp;&amp; !collision_line(x, y, target.x, target.y, objCollide, false, true))
            {
                // Line of sight
                state = GunnerAIState.MOVE;
            }
        
            break;    
        }
    
    
        case GunnerAIState.MOVE:
        {
            if (alertTime &gt; 0)
                alertTime--;
            else
            {
                if (!collision_line(x, y, target.x, target.y, objCollide, false, true))
                {
                    image_angle = point_direction(x, y, target.x, target.y);
                }
                
                if (followingPath)
                {
                    if (path_index = -1)
                    {
                        followingPath = false;
                        hasPath = false;
                        
                        state = GunnerAIState.ATTACK;
                    }
                }
                else
                {
                    if (hasPath)
                    {
                        path_start(path, MOVE_SPEED, path_action_stop, true);
                        followingPath = true;
                    }
                    else
                    {
                        // Find a new place to stand
                        var tries = 20;
                        
                        do
                        {
                            destX = target.x + random_range(MIN_MOVE_RANGE, MAX_MOVE_RANGE);
                            destY = target.y + random_range(MIN_MOVE_RANGE, MAX_MOVE_RANGE);
                            tries--;
                        }
                        until(!collision_line(destX, destY, target.x, target.y, objCollide, false, true) &amp;&amp; !place_meeting(destX, destY, objCollide) || tries == 0);
                        
                        if (tries != 0)
                        {
                            findPath = true;
                        }
                    }
                }
            }
            
            break;
        }
        
        case GunnerAIState.ATTACK:
        {   
            path_end();
            
            if (collision_line(x, y, target.x, target.y, objCollide, false, true))
            {
                state = GunnerAIState.MOVE;
            }
            else
            {
                image_angle = point_direction(x, y, target.x, target.y);
            
                if (chargeTime &gt; 0)
                    chargeTime--;
                
                if (chargeTime == ATTACK_TIME)
                {
                    // Attack
                    image_index = 0;
                    
                    var attack = instance_create(x, y, objGunnerGunshot);
                    attack.sprite_index = sprGunnerGunshot_Enemy;
                    attack.angle = point_direction(x, y, target.x, target.y);
                    attack.target = target;
                    attack.par = id;
                }
                else if (chargeTime == 0)
                {
                    chargeTime = CHARGE_TIME;
                    state = GunnerAIState.MOVE;
                }
            }
            break;
        }
    }
}
else
{
    path_end();            
          
              
    if (dead &amp;&amp; !objPlayer.changing)
    {
        objPlayer.changing = true;
        objPlayer.changeTarget = id;
    }
    
    // Slow down
    hspd = approach(hspd, 0, FRIC);
    vspd = approach(vspd, 0, FRIC);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// TAKE DAMAGE event
                         
if (hp &gt; 0)
{
    shakeScreen(1, 0.05);
    
    for (var i = 0; i &lt; 10; i++)
        instance_create(x, y, objBloodParticle);

    instance_create(x, y, objSliceParticle);
    
    if (state == GunnerAIState.IDLE)
        state = GunnerAIState.MOVE;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DEAD event
event_inherited();
path_end();

objPlayer.changing = true;
objPlayer.changeTarget = id;

if (!(hitX == 0 &amp;&amp; hitY == 0))
{
    var kbAngle = point_direction(hitX, hitY, x, y);
    hspd = lengthdir_x(KNOCKBACK_SPEED, kbAngle);
    vspd = lengthdir_y(KNOCKBACK_SPEED, kbAngle);
}

// generate blood splatters
for (var i = 0; i &lt; NUM_BLOOD_SPLATTERS; i++)
{
    var dashPart = instance_create(x, y, objBloodSplatter);
}

instance_create(x, y, objSliceParticle);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (frozen || pullFrozenTime != 0)
{
    sprite_index = sprIdle_Gunner;
    image_speed = 0.3;
}
if (chargeTime &lt; ATTACK_TIME &amp;&amp; chargeTime &gt; 0)
{
    sprite_index = sprPrimary_Gunner;
    image_speed = 0.08;
}
else if (hspd == 0 &amp;&amp; vspd == 0 &amp;&amp; path_index == -1)
{
    sprite_index = sprIdle_Gunner;
    image_speed = 0.3;
}
else
{
    sprite_index = sprMove_Gunner;
    image_speed = 0.2;
}

draw_sprite_ext(sprite_index, image_index, x + 3, y + 3, image_xscale, image_yscale, image_angle, c_black, 0.3 * fowAlpha);
draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, c_white, fowAlpha);


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
