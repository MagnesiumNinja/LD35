<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// CONSTANTS //

SPEEDRUN_OFF = 16;


// VARIABLES AND ACTIONS //

// Save the game
saveGame(0);

if (global.LAST_PLAYED_LEVEL != room)
{
    global.NUM_VIEWED_TEXTBOXES = 0;
}

global.LAST_PLAYED_LEVEL = room;

// Create the camera
global.CAMERA_OBJECT = noone;
global.CAMERA_X = 0;
global.CAMERA_Y = 0;

camera = instance_create(0, 0, objCamera);
camera.focus = objPlayer;

// Create the HUD
instance_create(0, 0, objHUD);
instance_create(0, 0, objChangeOverlay);

display_set_gui_size(1280, 720);


// Set up the path-finding grid
global.H_CELLS = room_width / global.CELL_SIZE;
global.V_CELLS = room_height / global.CELL_SIZE;


// SCREEN SHAKE //

global.SCREEN_SHAKE = false;
global.DEFAULT_SHAKE_VALUE = 4;

default_x = view_xport[0]; //Find what the view was originally
default_y = view_yport[0]; //Find what the view was originally

shakes = global.DEFAULT_SHAKE_VALUE; //The shake intensity (maximum-pixel-shake-per-side)
incr = 2; //The amount of intensity increment when the quake starts and stops.
factor = 0; //Current Intensity.
shakeTimer = -1;


// STARTING ACTIONS //

instance_create(0, 0, objLightController);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// LAST ENEMY ARROW //

if (instance_number(objEnemyEntity) == 1 &amp;&amp; !instance_exists(objLastEnemyArrow))
    instance_create(0, 0, objLastEnemyArrow);

    
// PAUSING //
    
if (!objPlayer.frozen &amp;&amp; keyboard_check_pressed(vk_escape) &amp;&amp; !instance_exists(objPause) &amp;&amp; !instance_exists(objScreenTransition))
{
    instance_create(x, y, objPause);
}


// TIMER //

if (!objPlayer.frozen &amp;&amp; !objPlayer.dead)
{
    global.TIME++;
}


// SHAKE //

if (instance_exists(global.CAMERA_OBJECT))
{
    if (global.CAMERA_OBJECT &gt;= 0)
    {
        global.CAMERA_X = (global.CAMERA_OBJECT.x - view_wview[0] / 2);
        global.CAMERA_Y = (global.CAMERA_OBJECT.y - view_hview[0] / 2);
    }
    
    if (global.SCREEN_SHAKE == true) 
    {
        // If we are shaking
        if (factor &lt; shakes) 
        {
            factor += incr;
        } 
        else 
        {
            factor = shakes;
        }
    }
    else 
    {
        // Stop the shaking
        if (factor &gt; 0) 
        {
            factor -= incr;
        }
        else 
        {
            factor = 0;
        }
    }
    
    if (factor &gt; 0) 
    { 
        view_object[0] = noone;
        view_xview[0] = clamp(global.CAMERA_X - factor + random(factor * 2), 0, room_width - view_wview[0]);
        view_yview[0] = clamp(global.CAMERA_Y - factor + random(factor * 2), 0, room_height - view_hview[0]);
    } 
    else 
    {
        view_object[0] = global.CAMERA_OBJECT;
    }
    
    if (shakeTimer &gt; 0) 
    {
        shakeTimer--;
    } 
    else 
    {
        global.SCREEN_SHAKE = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.SPEEDRUN)
{
    // Calculate time
    var ms, s, m;
    ms = floor(global.TIME / 0.06);
    
    s = floor(ms / 1000);
    ms -= s * 1000;
    
    m = floor(s / 60);
    s -= m * 60;
    
    // Draw the timer
    draw_set_font(fntText);

    draw_set_valign(fa_bottom);    

    if (ms &gt; 99)
    {
        draw_set_color(c_black);
        draw_text(SPEEDRUN_OFF + 2, view_hport[0] - SPEEDRUN_OFF + 2, 
                string_repeat("0", 2 - string_length(string(m))) + string(m) + ":" + 
                string_repeat("0", 2 - string_length(string(s))) + string(s) + ":" + 
                string_repeat("0", 2 - string_length(string_copy(string(ms), 0, 2))) + string_copy(string(ms), 0, 2));
    
        draw_set_color(c_white);
        draw_text(SPEEDRUN_OFF,  view_hport[0] - SPEEDRUN_OFF, 
                string_repeat("0", 2 - string_length(string(m))) + string(m) + ":" + 
                string_repeat("0", 2 - string_length(string(s))) + string(s) + ":" + 
                string_repeat("0", 2 - string_length(string_copy(string(ms), 0, 2))) + string_copy(string(ms), 0, 2));
    }
    else
    {
        draw_set_color(c_black);
        draw_text(SPEEDRUN_OFF + 2,  view_hport[0] - SPEEDRUN_OFF + 2, 
                string_repeat("0", 2 - string_length(string(m))) + string(m) + ":" + 
                string_repeat("0", 2 - string_length(string(s))) + string(s) + ":" + 
                string_repeat("0", 2 - string_length(string_copy(string(ms), 1, 1))) + string_copy(string(ms), 1, 1));
    
        draw_set_color(c_white);
        draw_text(SPEEDRUN_OFF,  view_hport[0] - SPEEDRUN_OFF, 
                string_repeat("0", 2 - string_length(string(m))) + string(m) + ":" + 
                string_repeat("0", 2 - string_length(string(s))) + string(s) + ":" + 
                string_repeat("0", 2 - string_length(string_copy(string(ms), 1, 1))) + string_copy(string(ms), 1, 1));
    }   
    
    draw_set_valign(fa_top);   

    draw_set_colour(c_white);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
